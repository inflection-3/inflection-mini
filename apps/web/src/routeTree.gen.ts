/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as AdminAppsIndexRouteImport } from './routes/admin/apps/index'
import { Route as AdminAgentsIndexRouteImport } from './routes/admin/agents/index'
import { Route as MainWalletIndexRouteImport } from './routes/_main/wallet/index'
import { Route as MainNotificationsIndexRouteImport } from './routes/_main/notifications/index'
import { Route as MainNetworkIndexRouteImport } from './routes/_main/network/index'
import { Route as MainAppsIndexRouteImport } from './routes/_main/apps/index'
import { Route as AdminAppsNewRouteImport } from './routes/admin/apps/new'
import { Route as AdminAppsIdRouteImport } from './routes/admin/apps/$id'
import { Route as MainAppsIdRouteImport } from './routes/_main/apps/$id'
import { Route as AdminAppsIdInteractionRouteImport } from './routes/admin/apps/$id.interaction'
import { Route as AdminAppsIdEditRouteImport } from './routes/admin/apps/$id.edit'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const AdminAppsIndexRoute = AdminAppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAgentsIndexRoute = AdminAgentsIndexRouteImport.update({
  id: '/agents/',
  path: '/agents/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const MainWalletIndexRoute = MainWalletIndexRouteImport.update({
  id: '/wallet/',
  path: '/wallet/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainNotificationsIndexRoute = MainNotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainNetworkIndexRoute = MainNetworkIndexRouteImport.update({
  id: '/network/',
  path: '/network/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainAppsIndexRoute = MainAppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => MainRouteRoute,
} as any)
const AdminAppsNewRoute = AdminAppsNewRouteImport.update({
  id: '/apps/new',
  path: '/apps/new',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAppsIdRoute = AdminAppsIdRouteImport.update({
  id: '/apps/$id',
  path: '/apps/$id',
  getParentRoute: () => AdminRouteRoute,
} as any)
const MainAppsIdRoute = MainAppsIdRouteImport.update({
  id: '/apps/$id',
  path: '/apps/$id',
  getParentRoute: () => MainRouteRoute,
} as any)
const AdminAppsIdInteractionRoute = AdminAppsIdInteractionRouteImport.update({
  id: '/interaction',
  path: '/interaction',
  getParentRoute: () => AdminAppsIdRoute,
} as any)
const AdminAppsIdEditRoute = AdminAppsIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AdminAppsIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/': typeof MainIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/login': typeof LoginIndexRoute
  '/apps/$id': typeof MainAppsIdRoute
  '/admin/apps/$id': typeof AdminAppsIdRouteWithChildren
  '/admin/apps/new': typeof AdminAppsNewRoute
  '/apps': typeof MainAppsIndexRoute
  '/network': typeof MainNetworkIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/wallet': typeof MainWalletIndexRoute
  '/admin/agents': typeof AdminAgentsIndexRoute
  '/admin/apps': typeof AdminAppsIndexRoute
  '/admin/apps/$id/edit': typeof AdminAppsIdEditRoute
  '/admin/apps/$id/interaction': typeof AdminAppsIdInteractionRoute
}
export interface FileRoutesByTo {
  '/': typeof MainIndexRoute
  '/admin': typeof AdminIndexRoute
  '/login': typeof LoginIndexRoute
  '/apps/$id': typeof MainAppsIdRoute
  '/admin/apps/$id': typeof AdminAppsIdRouteWithChildren
  '/admin/apps/new': typeof AdminAppsNewRoute
  '/apps': typeof MainAppsIndexRoute
  '/network': typeof MainNetworkIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/wallet': typeof MainWalletIndexRoute
  '/admin/agents': typeof AdminAgentsIndexRoute
  '/admin/apps': typeof AdminAppsIndexRoute
  '/admin/apps/$id/edit': typeof AdminAppsIdEditRoute
  '/admin/apps/$id/interaction': typeof AdminAppsIdInteractionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_main/': typeof MainIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/login/': typeof LoginIndexRoute
  '/_main/apps/$id': typeof MainAppsIdRoute
  '/admin/apps/$id': typeof AdminAppsIdRouteWithChildren
  '/admin/apps/new': typeof AdminAppsNewRoute
  '/_main/apps/': typeof MainAppsIndexRoute
  '/_main/network/': typeof MainNetworkIndexRoute
  '/_main/notifications/': typeof MainNotificationsIndexRoute
  '/_main/wallet/': typeof MainWalletIndexRoute
  '/admin/agents/': typeof AdminAgentsIndexRoute
  '/admin/apps/': typeof AdminAppsIndexRoute
  '/admin/apps/$id/edit': typeof AdminAppsIdEditRoute
  '/admin/apps/$id/interaction': typeof AdminAppsIdInteractionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/'
    | '/admin/'
    | '/login'
    | '/apps/$id'
    | '/admin/apps/$id'
    | '/admin/apps/new'
    | '/apps'
    | '/network'
    | '/notifications'
    | '/wallet'
    | '/admin/agents'
    | '/admin/apps'
    | '/admin/apps/$id/edit'
    | '/admin/apps/$id/interaction'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/login'
    | '/apps/$id'
    | '/admin/apps/$id'
    | '/admin/apps/new'
    | '/apps'
    | '/network'
    | '/notifications'
    | '/wallet'
    | '/admin/agents'
    | '/admin/apps'
    | '/admin/apps/$id/edit'
    | '/admin/apps/$id/interaction'
  id:
    | '__root__'
    | '/_main'
    | '/admin'
    | '/_main/'
    | '/admin/'
    | '/login/'
    | '/_main/apps/$id'
    | '/admin/apps/$id'
    | '/admin/apps/new'
    | '/_main/apps/'
    | '/_main/network/'
    | '/_main/notifications/'
    | '/_main/wallet/'
    | '/admin/agents/'
    | '/admin/apps/'
    | '/admin/apps/$id/edit'
    | '/admin/apps/$id/interaction'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/admin/apps/': {
      id: '/admin/apps/'
      path: '/apps'
      fullPath: '/admin/apps'
      preLoaderRoute: typeof AdminAppsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/agents/': {
      id: '/admin/agents/'
      path: '/agents'
      fullPath: '/admin/agents'
      preLoaderRoute: typeof AdminAgentsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_main/wallet/': {
      id: '/_main/wallet/'
      path: '/wallet'
      fullPath: '/wallet'
      preLoaderRoute: typeof MainWalletIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/notifications/': {
      id: '/_main/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof MainNotificationsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/network/': {
      id: '/_main/network/'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof MainNetworkIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/apps/': {
      id: '/_main/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof MainAppsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/admin/apps/new': {
      id: '/admin/apps/new'
      path: '/apps/new'
      fullPath: '/admin/apps/new'
      preLoaderRoute: typeof AdminAppsNewRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/apps/$id': {
      id: '/admin/apps/$id'
      path: '/apps/$id'
      fullPath: '/admin/apps/$id'
      preLoaderRoute: typeof AdminAppsIdRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_main/apps/$id': {
      id: '/_main/apps/$id'
      path: '/apps/$id'
      fullPath: '/apps/$id'
      preLoaderRoute: typeof MainAppsIdRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/admin/apps/$id/interaction': {
      id: '/admin/apps/$id/interaction'
      path: '/interaction'
      fullPath: '/admin/apps/$id/interaction'
      preLoaderRoute: typeof AdminAppsIdInteractionRouteImport
      parentRoute: typeof AdminAppsIdRoute
    }
    '/admin/apps/$id/edit': {
      id: '/admin/apps/$id/edit'
      path: '/edit'
      fullPath: '/admin/apps/$id/edit'
      preLoaderRoute: typeof AdminAppsIdEditRouteImport
      parentRoute: typeof AdminAppsIdRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
  MainAppsIdRoute: typeof MainAppsIdRoute
  MainAppsIndexRoute: typeof MainAppsIndexRoute
  MainNetworkIndexRoute: typeof MainNetworkIndexRoute
  MainNotificationsIndexRoute: typeof MainNotificationsIndexRoute
  MainWalletIndexRoute: typeof MainWalletIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainAppsIdRoute: MainAppsIdRoute,
  MainAppsIndexRoute: MainAppsIndexRoute,
  MainNetworkIndexRoute: MainNetworkIndexRoute,
  MainNotificationsIndexRoute: MainNotificationsIndexRoute,
  MainWalletIndexRoute: MainWalletIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AdminAppsIdRouteChildren {
  AdminAppsIdEditRoute: typeof AdminAppsIdEditRoute
  AdminAppsIdInteractionRoute: typeof AdminAppsIdInteractionRoute
}

const AdminAppsIdRouteChildren: AdminAppsIdRouteChildren = {
  AdminAppsIdEditRoute: AdminAppsIdEditRoute,
  AdminAppsIdInteractionRoute: AdminAppsIdInteractionRoute,
}

const AdminAppsIdRouteWithChildren = AdminAppsIdRoute._addFileChildren(
  AdminAppsIdRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminAppsIdRoute: typeof AdminAppsIdRouteWithChildren
  AdminAppsNewRoute: typeof AdminAppsNewRoute
  AdminAgentsIndexRoute: typeof AdminAgentsIndexRoute
  AdminAppsIndexRoute: typeof AdminAppsIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminAppsIdRoute: AdminAppsIdRouteWithChildren,
  AdminAppsNewRoute: AdminAppsNewRoute,
  AdminAgentsIndexRoute: AdminAgentsIndexRoute,
  AdminAppsIndexRoute: AdminAppsIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
